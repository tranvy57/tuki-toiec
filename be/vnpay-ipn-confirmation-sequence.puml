@startuml VNPAY Payment Confirmation (IPN) Business Flow - Tuki TOEIC
!theme plain

actor "VNPAY Gateway" as VNPAY
boundary "VnpayController" as Controller
control "VnpayService" as Service
control "PlanService" as PlanService
entity "OrderRepository" as OrderRepo
entity "CourseRepository" as CourseRepo
entity "UserCourseRepository" as UserCourseRepo
database "Database" as DB

title VNPAY Payment Confirmation (IPN) Business Flow - Course Purchase

== Payment Callback from VNPAY ==
VNPAY -> Controller: POST /vnpay/ipn\n{vnp_ResponseCode, vnp_TxnRef, vnp_SecureHash, vnp_Amount, ...}
Controller -> Service: confirmIpn(params)

== Signature Verification ==
Service -> Service: verifyChecksum(params)
note right
  1. Extract vnp_SecureHash from params
  2. Sort remaining parameters
  3. Create signData string
  4. Generate HMAC-SHA512 signature
  5. Compare with received hash
end note

alt Invalid Signature
    Service --> Controller: {RspCode: '97', Message: 'Invalid signature'}
    Controller --> VNPAY: 97 - Invalid signature
else Valid Signature
    
    == Extract Payment Data ==
    Service -> Service: Extract vnp_TxnRef (order code)
    Service -> Service: Extract vnp_ResponseCode (payment result)
    Service -> Service: Extract vnp_Amount and convert to VND
    
    == Load Order ==
    Service -> OrderRepo: findOne({code: vnp_TxnRef})
    OrderRepo -> DB: SELECT order WHERE code = ?
    DB --> OrderRepo: order data
    OrderRepo --> Service: order
    
    alt Order Not Found
        Service --> Controller: {RspCode: '01', Message: 'Order not found'}
        Controller --> VNPAY: 01 - Order not found
    else Order Found
        
        == Validate Amount ==
        Service -> Service: Compare order.amount with vnp_Amount
        alt Amount Mismatch
            Service --> Controller: {RspCode: '04', Message: 'Invalid amount'}
            Controller --> VNPAY: 04 - Invalid amount
        else Amount Valid
            
            == Check Order Status ==
            alt Order Already Paid
                Service --> Controller: {RspCode: '02', Message: 'Order already confirmed'}
                Controller --> VNPAY: 02 - Already confirmed
            else Order Pending
                
                == Process Payment Result ==
                alt Payment Successful (vnp_ResponseCode = '00')
                    
                    == Update Order Status ==
                    Service -> Service: Update order fields\n{status: 'paid', vnpTransactionNo, bankCode, vnpPayDate}
                    Service -> OrderRepo: save(order)
                    OrderRepo -> DB: UPDATE order SET status='paid', ...
                    DB --> OrderRepo: updated order
                    
                    == Create User Course Access ==
                    Service -> Service: createUserCourse(order)
                    
                    == Load Order with Relations ==
                    Service -> OrderRepo: findOne(orderId) with relations ['user', 'course']
                    OrderRepo -> DB: SELECT order JOIN user JOIN course
                    DB --> OrderRepo: order with user & course
                    OrderRepo --> Service: complete order data
                    
                    == Check Existing User Courses ==
                    Service -> UserCourseRepo: find({user.id, course.id})
                    UserCourseRepo -> DB: SELECT user_courses WHERE user_id AND course_id
                    DB --> UserCourseRepo: existing courses
                    UserCourseRepo --> Service: existing user courses
                    
                    == Handle Course Access Logic ==
                    alt Has Active Course
                        Service -> Service: Log "User already has active course, skip"
                        note right: No action needed - user already has access
                    else Has Expired Course
                        Service -> Service: Reactivate expired course
                        Service -> UserCourseRepo: save(reactivated course)
                        UserCourseRepo -> DB: UPDATE user_course SET status='ACTIVE', purchaseDate, expireDate
                        DB --> UserCourseRepo: updated course
                        
                        Service -> PlanService: create({courseId, targetScore}, user)
                        PlanService -> DB: INSERT plan
                        DB --> PlanService: created plan
                    else Has Trial Course Only
                        Service -> Service: Create new active course
                        Service -> UserCourseRepo: save(new active course)
                        UserCourseRepo -> DB: INSERT user_course (status='ACTIVE')
                        DB --> UserCourseRepo: new active course
                        
                        Service -> PlanService: create({courseId, targetScore}, user)
                        PlanService -> DB: INSERT plan
                        DB --> PlanService: created plan
                    else No Existing Course
                        Service -> Service: Create first course for user
                        Service -> UserCourseRepo: save(new course)
                        UserCourseRepo -> DB: INSERT user_course (status='ACTIVE')
                        DB --> UserCourseRepo: new course
                        
                        Service -> PlanService: create({courseId, targetScore}, user)
                        PlanService -> DB: INSERT plan
                        DB --> PlanService: created plan
                    end
                    
                    Service --> Controller: {RspCode: '00', Message: 'Confirm Success'}
                    Controller --> VNPAY: 00 - Payment confirmed successfully
                    
                else Payment Failed (vnp_ResponseCode != '00')
                    
                    == Update Failed Order ==
                    Service -> Service: Set order.status = 'failed'
                    Service -> OrderRepo: save(order)
                    OrderRepo -> DB: UPDATE order SET status='failed'
                    DB --> OrderRepo: updated order
                    
                    Service --> Controller: {RspCode: '00', Message: 'Confirm Failed'}
                    Controller --> VNPAY: 00 - Payment failure confirmed
                end
            end
        end
    end
end

== Error Handling ==
alt Exception Occurs
    Service -> Service: Log error details
    Service --> Controller: {RspCode: '99', Message: 'Internal error'}
    Controller --> VNPAY: 99 - Internal server error
end

note over VNPAY, DB
  **Key Business Logic:**
  • VNPAY IPN webhook for secure payment confirmation
  • HMAC-SHA512 signature verification for security
  • Idempotent processing (handles duplicate notifications)
  • Smart course access management (trial/expired/active logic)
  • Automatic learning plan creation upon successful payment
  • Comprehensive error codes for VNPAY integration
  • Transaction safety with proper status management
end note

@enduml